8a:
1.SYSDATE
SELECT SYSDATE FROM dual;
2. NEXT_DAY(date, 'DAY')
SELECT NEXT_DAY(SYSDATE, 'MONDAY') AS next_monday FROM dual;
3. ADD_MONTHS(date, number_of_months)
SELECT ADD_MONTHS(SYSDATE, 3) AS date_plus_3_months FROM dual;
4. LAST_DAY(date)
SELECT LAST_DAY(SYSDATE) AS end_of_month FROM dual;
5. MONTHS_BETWEEN(date1, date2)
SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE('2024-01-01', 'YYYY-MM-DD')) AS months_diff FROM dual;
6. LEAST(date1, date2, ...) and GREATEST(date1, date2, ...)
SELECT LEAST(SYSDATE, TO_DATE('2025-12-25', 'YYYY-MM-DD')) AS earliest FROM dual;
SELECT GREATEST(SYSDATE, TO_DATE('2025-12-25', 'YYYY-MM-DD')) AS latest FROM dual;
7. TRUNC(date, format)
SELECT TRUNC(SYSDATE) AS truncated_date FROM dual; -- Truncates time
SELECT TRUNC(SYSDATE, 'MM') AS first_of_month FROM dual;
8. ROUND(date, format)
SELECT ROUND(SYSDATE, 'MONTH') AS rounded_month FROM dual;
9. TO_CHAR(date, format)
SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') AS date_string FROM dual;
10. TO_DATE(string, format)
SELECT TO_DATE('10-APR-2025', 'DD-MON-YYYY') AS converted_date FROM dual;

8b:
CREATE OR REPLACE FUNCTION calculate_bonus(p_salary NUMBER)
RETURN NUMBER
IS
    v_bonus NUMBER;
BEGIN
    IF p_salary < 3000 THEN
        v_bonus := p_salary * 0.10;
    ELSIF p_salary BETWEEN 3000 AND 6000 THEN
        v_bonus := p_salary * 0.15;
    ELSE
        v_bonus := p_salary * 0.20;
    END IF;

    RETURN v_bonus;
END;
/
