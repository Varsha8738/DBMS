2a)
ðŸ”¹ 5. NOT EXISTS
SELECT name FROM employees e
WHERE NOT EXISTS (
    SELECT 1 FROM departments d WHERE d.dept_id = e.dept_id
);
ðŸ”¹ 6. UNION
SELECT name FROM employees WHERE dept_id = 10
UNION
SELECT name FROM employees WHERE salary > 60000;
ðŸ”¹ 7. INTERSECT
SELECT name FROM employees WHERE dept_id = 10
INTERSECT
SELECT name FROM employees WHERE salary > 60000;
2b)
SET SERVEROUTPUT ON;

DECLARE
    -- User-defined exception
    e_low_salary EXCEPTION;

BEGIN
    FOR emp_rec IN (
        SELECT emp_id, name, salary
        FROM Employees
        WHERE department_id = 10
        FOR UPDATE
    ) LOOP
        -- Raise user-defined exception if salary is too low
        IF emp_rec.salary < 10000 THEN
            RAISE e_low_salary;
        END IF;

        -- Raise built-in exception if name is NULL
        IF emp_rec.name IS NULL THEN
            RAISE_APPLICATION_ERROR(-20001, 'Employee name cannot be NULL (ID: ' || emp_rec.emp_id || ')');
        END IF;

        -- Update salary
        UPDATE Employees
        SET salary = emp_rec.salary * 1.10
        WHERE CURRENT OF emp_rec;

        DBMS_OUTPUT.PUT_LINE('Updated Salary for ' || emp_rec.name || 
                             ' (ID: ' || emp_rec.emp_id || ') to: ' || 
                             TO_CHAR(emp_rec.salary * 1.10));
    END LOOP;

    COMMIT;

-- Exception handling
EXCEPTION
    WHEN e_low_salary THEN
        DBMS_OUTPUT.PUT_LINE('Salary is too low for update.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
